;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(erc-server-history-list read-expression-history counsel-set-variable-history shell-command-history youdao-dictionary-history read-flycheck-checker-history sql-database-history sql-user-history sql-product-history which-key-keymap-history org-tags-history helm-ag--helm-history helm-ag--command-history input-method-history imenu--history-list regexp-history ido-buffer-history ivy-history org-read-date-history ido-file-history counsel-describe-symbol-history counsel-M-x-history file-name-history swiper-history extended-command-history minibuffer-history helm-M-x-input-history))
(setq read-expression-history '("(setq exec-path-from-shell-arguments '(\"-l\"))"))
(setq counsel-set-variable-history '(#("exec-path-from" 0 14 (ivy-index 3))))
(setq shell-command-history '("date"))
(setq youdao-dictionary-history '("key" "chinese"))
(setq read-flycheck-checker-history '("ada-gnat"))
(setq sql-database-history '("10.18.2.76"))
(setq sql-user-history '("csbc"))
(setq sql-product-history '(#("oracle" 0 6 (ivy-index 0))))
(setq which-key-keymap-history '("popwin:keymap" "popwin:keymap" "objc-mode-map" "Info-edit-mode-map"))
(setq helm-ag--helm-history '("powerline arrow" "better-default" "key" "package" "custom" "init package" "init pa" "gtd" "org gtd" "package" "init-key" "init-pack"))
(setq imenu--history-list '("indent-region-or-buffer"))
(setq regexp-history '("spacemacs" "spacemacs" "spacemacs" "spacemacs" "spacemacs" "hello" nil "interactively" "hello" "mode" "buffer"))
(setq ido-buffer-history '("*Process List*" "config.el" "init.el<.emacs.d>" "*unsent mail*" "*Messages*" ".spacemacs" "*Messages*"))
(setq ivy-history '("obj: func1" "lisp/init-keybindings.el" "lisp/init-packages.el"))
(setq org-read-date-history '("17:30    " "15:00    " "   " "13：00    " "   17:30    " "		                   " "8:00    " "22:00    " "18:00    " "21:00            " "16:00    " "21:00            " "9:00    " "21:00    " "18:00    " "8:00    " "   "))
(setq ido-file-history '("." "init-packages.el" "."))
(setq counsel-describe-symbol-history '(#("^" 0 1 (ivy-index 5308)) #("^eval buff" 0 10 (ivy-index 0)) #("^org-mode" 0 9 (ivy-index 1))))
(setq counsel-M-x-history '(#("^package list " 0 14 (ivy-index 0)) #("^eva bu" 0 7 (ivy-index 0)) #("^find va" 0 8 (ivy-index 1)) #("^find fun" 0 9 (ivy-index 0)) #("^nodejs repl send buffer" 0 24 (ivy-index 0)) #("^nodejs repl" 0 12 (ivy-index 6)) #("^load file" 0 10 (ivy-index 0)) #("^eval buffer" 0 12 (ivy-index 0)) #("^nodejs." 0 8 (ivy-index 0)) #("^eval buf" 0 9 (ivy-index 0)) #("^customize gr" 0 13 (ivy-index 0))))
(setq file-name-history '("~/.spacemacs.d/layers/turtletaro/packages.el" "~/.spacemacs.d/init.el" "~/.spacemacs.d/turtletaro/packages.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-packages.el" #("/Users/wangqun/.emacs.d/doc/" 0 28 (ivy-index 0)) "~/.emacs.d/lisp/init-ui.el" "~/dev/hiemacs/testjs.js" "~/.emacs.d/turtletaro.org" "~/dev/hipython/hello.py" "~/dev/hiemacs/hiemacs.el" "~/.emacs.d/lisp/init-better-defaults.el" "~/.emacs.d/lisp/init-keybindings.el" "~/.emacs.d/gtd.org" "~/org/sec.org" "~/.emacs.d/lisp/init-org.el" "~/org/first.org" "~/.emacs.d/lisp/init-better-defaults.elc" "~/.spacemacs" "~/.emacs.d/lisp/custom.el" "~/.emacs.d.bak/.emacs.d.20180401/init.el" "~/.emacs.d/init-packages.el" #("/Users/wangqun/dev/hiemacs/" 0 27 (ivy-index 0)) #("/Users/wangqun/.emacs.d/init.el" 0 31 (ivy-index 0)) "~/.emacs.d/CHANGELOG.org"))
(setq swiper-history '(#("ivy" 0 3 (ivy-index 23)) #("user config" 0 11 (ivy-index 2)) #("user init" 0 9 (ivy-index 0)) "user " #("pack" 0 4 (ivy-index 0)) #("configuration" 0 13 (ivy-index 7)) #("default font" 0 12 (ivy-index 1)) #("banner" 0 6 (ivy-index 3)) #("line number" 0 11 (ivy-index 3)) #("theme" 0 5 (ivy-index 4)) #("PATH" 0 4 (ivy-index 1)) "warning" "error" "error" #("powerline arrow" 0 15 (ivy-index 0)) #("key" 0 3 (ivy-index 1)) "user" #("user" 0 4 (ivy-index 6)) #("user-config" 0 11 (ivy-index 1)) #("user-" 0 5 (ivy-index 0)) #("add" 0 3 (ivy-index 2)) #("ex" 0 2 (ivy-index 3)) "default key" #("full" 0 4 (ivy-index 1)) #("SPC" 0 3 (ivy-index 4)) "SPC
      ;; Uncomment some layer names and press <SPC f e R> (Vim style) or" #("user in" 0 7 (ivy-index 3)) #("user-init" 0 9 (ivy-index 0)) "edit" #("    dotspacemacs-mode-line-unicode-symbols nil" 0 1 (display "263 " swiper-line-number "263 ") 1 46 (fontified t)) #("unicode" 0 7 (ivy-index 1)) #("font" 0 4 (ivy-index 1)) #("exclude" 0 7 (ivy-index 0)) #("python" 0 6 (ivy-index 0)) #("lisp" 0 4 (ivy-index 0)) "helm-ag" #("leng" 0 4 (ivy-index 2)) #("long break fre" 0 14 (ivy-index 0)) "occur-dwim" #("save" 0 4 (ivy-index 0)) #("backup" 0 6 (ivy-index 0)) #("hun" 0 3 (ivy-index 1)) #("hung" 0 4 (ivy-index 0)) "org" #("idle delay" 0 10 (ivy-index 0)) #("sme" 0 3 (ivy-index 0)) #("coun" 0 4 (ivy-index 3)) "recent"))
(setq extended-command-history '(#("package-list-packages" 0 21 (match-part "package-list-packages")) "customize-group" "eval-buffer" "configuration-layer/create-layer" "load-file" "flycheck-mode" "customize-variable" "counsel-set-variable" "counsel-find-file" "emacs-version" "eshell" "powerline-reset" "powerline-vim-theme" "shell" "which-key-show-keymap" "which-key-show-major-mode" "evil-mode" "emacs-lisp-mode" "lisp-mode" "reveal-in-osx-finder" "term" "elpy-config" "helm-do-ag-project-root" "sql-mode" "describe-mode" "dired" "which-key-mode" "open-init-file" "turtletaro/retrieve-chrome-current-tab-url" "org-capture" "set-input-method" "iedit-mode" "imenu" "occur-edit-mode" "ibuffer" "indent-region" "byte-recompile-directory" "byte-compile-file" "prog-mode" "counsel-git" "nodejs-repl" "cd" "nodejs-repl-send-buffer" "company-mode"))
(setq minibuffer-history '("m" #("Spacemacs" 0 9 (fontified t face font-lock-comment-face)) "i" "popwin" "State" "popwin" "/Users/wangqun/.spacemacs.d/layers/turtletaro/keybindings.el" "/Users/wangqun/.spacemacs.d/layers/turtletaro/config.el" "/Users/wangqun/.spacemacs.d/" "/Users/wangqun/.spacemacs.d/layers/turtletaro/" "/Users/wangqun/.spacemacs.d/init" "/Users/wangqun/.spacemacs.d/turtletaro/" "m" "/Users/wangqun/.emacs.d/" "turtletaro" "/Users/wangqun/.spacemacs.d" "/Users/wangqun/.spacemacs.d/turtletaro" "m" "animals" "+-------+-------+-------+-------+" "/Users/wangqun/.emacs.d/init" "/Users/wangqun/.emacs.d/lisp/pa" "m" "exec path" "/Users/wangqun/.sp" "m" "/Users/wangqun/.spacemacs.d/" "m" "/Users/wangqun/.emacs.d/init" #("emacs-lisp" 0 10 (fontified t)) "/Users/wangqun/.emacs.d/ini" "/Users/wangqun/.emacs.d/init." "State" "exec path from " "exec path from" "/Users/wangqun/.spacemacs.d/" "m" "better-defaults" "美国" "你最近好么?" "中国" "key" "git" "comp" "popwin" "shell" #("dotspacemacs-fullscreen-at-startup" 0 17 (fontified t) 17 34 (fontified t)) #("version-control" 0 15 (fontified t face font-lock-comment-face)) "/Users/wangqun/.spacemacs.d/init.el" "/Users/wangqun/.spa" "/Users/wangqun/.spacemacs.d" "done" "/Users/wangqun/.emacs.d/init" "/Users/wangqun/.emacs.d" "/Users/wangqun/.emacs.d/ini" "/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d/init" "/Users/wangqun/" "flyche" "flycheck" "flycheck-checker" "/Users/wangqun/.emacs.d/init" "/Users/wangqun/dev/hiemacs/" "/bin/zsh" "/Users/wangqun/.emacs.d/ini" "/Users/wangqun/.emacs.d/org" "/Users/wangqun/.emacs.d/ini" "org" "/Users/wangqun/.emacs.d/ini" "/Users/wangqun/dev/hisql/oracle.sql" #("Elpy" 0 4 (face header-line)) #("afclip" 0 6 (mouse-face highlight dired-filename t help-echo "mouse-2: visit this file in other window" fontified t)) "\317\372\355\376" "/usr/bin/" "file" "/Users/wangqun/dev/hipython/" "m" "/Users/wangqun/dev/hiemacs/" "/bin/zsh" "/Users/wangqun/" "m" "/Users/wangqun/dev/hiemacs/" "/Users/wangqun/.emacs.d/lisp/defa" "/Users/wangqun/.emacs.d/lisp/key" "/Users/wangqun/.emacs.d/lisp/init pa" "/Users/wangqun/.emacs.d/init" "evil mo" "evil mode" "/Users/wangqun/.emacs.d/lisp/ini pa" "/Users/wangqun/.emacs.d/org" "popwin" "shell" "T" "chinese" "org " "popwin" "popwi" "popwin" "/Users/wangqun/.emacs.d/org" "/Users/wangqun/org/sec" "popwin" "" "nil" "org" "/Users/wangqun/org/a.org" "/Users/wangqun/.emacs.d/org" "2018    " "   " "/Users/wangqun/.emacs.d/org" "/Users/wangqun/.emacs.d/lisp/keyb" "/Users/wangqun/.emacs.d/init" "init" "/Users/wangqun/.emacs.d/ini" "m" "/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d/lisp/de" "/Users/wangqun/.emacs.d/tu" "/Users/wangqun/.emacs.d/lisp/pack" "/Users/wangqun/.emacs.d/lisp/p" "/Users/wangqun/.emacs.d/ini" "/Users/wangqun/.emacs.d/lisp/de" "/Users/wangqun/.emacs.d/lisp/org" "/Users/wangqun/.emacs.d/lisp/de" "org-pomo" "/Users/wangqun/.emacs.d/lisp/pa" #("setq" 0 4 (face font-lock-keyword-face fontified t)) "/Users/wangqun/.emacs.d/lisp/org" "/Users/wangqun/.emacs.d/lisp/de" "/Users/wangqun/.emacs.d/lisp/p" "org ca" #("Debugging" 0 9 (fontified t)) "grep" "/Users/wangqun/.emacs.d/lisp/or" "/Users/wangqun/org/" "iedit" "m" #("var" 0 3 (fontified t font-lock-face font-lock-keyword-face)) "iedit" "/Users/wangqun/.emacs.d/lisp/" "me" "/Users/wangqun/.emacs.d/lisp/pak" "/Users/wangqun/.emacs.d/lisp/defa" "tes" "/Users/wangqun/.emacs.d/lisp/" "popin" "/Users/wangqun/.emacs.d/lisp/pack" "/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d/ini" "var1" "concarString" "add" "web mode" "major" "/Users/wangqun/dev/hihtml/tst.html" "/Users/wangqun/.emacs.d/lisp/de" #("monokai" 0 7 (fontified t)) "/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d/tur" "/Users/wangqun/.emacs.d/turtletaro.org" "/Users/wangqun/.sp" "/Users/wangqun/.emacs.d/lisp/c" "/Users/wangqun/.sp" "/Users/wangqun/.emacs.d/lisp/aa.py" "/Users/wangqun/.emacs.d/init-ui.el" "with-eval-after-load" "/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d/testAA" "/Users/wangqun/.emacs.d/test/x.txt" "/Users/wangqun/.emacs.d/test/f.txt" "/Users/wangqun/.emacs.d/test/b.txt" "/Users/wangqun/.emacs.d/test/c.txt" "/Users/wangqun/.emacs.d/test/b.txt" "/Users/wangqun/.emacs.d/test/a.txt" "/Users/wangqun/.emacs.d/test" "try-expand-all-abbrevs" "" "hippie-expand" "/Users/wangqun/.emacs.d/lisp/key" "/Users/wangqun/.emacs.d/lisp/better" "/Users/wangqun/dev/hiemacs/testjs.js" "/Users/wangqun/dev/hieam" "in" "update-dir" "update-directory-autoloads" "update-dir" "update" "/Users/wangqun/.emacs.d/lisp" "mess" "/Users/wangqun/.emacs.d/lisp" "/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d/lisp" "in" "/Users/wangqun/.emacs.d/lisp/" #("python" 0 6 (fontified t)) "/Users/wangqun/.emacs.d/lisp/key" "/Users/wangqun/.emacs.d/lisp/init pa" "mes" "/Users/wangqun/.emacs.d/lisp/key" "init" "/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d/lisp/key" "/Users/wangqun/.sp" "/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d.bak/.emacs.d.20180401/ini" "/Users/wangqun/.emacs.d/ini" "/Users/wangqun/.emacs.d/init" "/Users/wangqun/.emacs.d/in" "/Users/wangqun/.emacs.d/ini" "/Users/wangqun/.emacs.d/init" "/Users/wangqun/.emacs.d/ini" "/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d/lisp/init-keybindings.el" "/Users/wangqun/.emacs.d/lisp/init-org.el" "/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d/lisp/init-better-default.el" "/Users/wangqun/.emacs.d/lisp/ini" "/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d/lisp/init-ui.el" "buffer" #("spacemacs-emacs-min-version" 0 27 (face font-lock-variable-name-face fontified t)) "/Users/wangqun/.emacs.d/lisp/ini" #("t." 0 2 (face font-lock-comment-face fontified t)) "/Users/wangqun/.emacs.d/ini" "features" "global-company-mode" #("> > " 0 2 (font-lock-face (comint-highlight-prompt) inhibit-line-move-field-capture t field output rear-nonsticky t front-sticky (field inhibit-line-move-field-capture) fontified t) 2 4 (font-lock-face (comint-highlight-prompt) inhibit-line-move-field-capture t field output rear-nonsticky t front-sticky (field inhibit-line-move-field-capture) fontified t)) "popwin-mode" "" "auto-save-default" "in" "auto-save-default" "ini" "/Users/wangqun/org/fi" "company prefix" "company prefi" "company prefix" "company-prefix len" "find-fun" "/Users/wangqun/.emacs.d/init.el" "init" "ini" "mes" #("packages" 0 8 (fontified t face font-lock-comment-face)) #("GPLv3" 0 5 (fontified t face font-lock-comment-face)) "Delay" "company" "/Users/wangqun/.emacs.d/init" "Cancel" #("*" 0 1 (wrap-prefix #("* " 0 2 (face org-indent)) line-prefix "" face org-level-1 keymap (keymap (mouse-2 . org-bullets-set-point-and-cycle) (mouse-1 . org-cycle)) composition (0 1 [9673]) fontified t)) #("setq-default" 0 12 (face font-lock-comment-face fontified t)) "/Users/wangqun/org/sec.org" "/Users/wangqun/dev/hiemacs/" "/Users/wangqun/.sp" "/Users/wangqun/.emacs.d/in" "/Users/wangqun/.emacs.d/ini"))
(setq helm-M-x-input-history '("pack" #("spacemacs" 0 9 (fontified t)) "cuso" "eval bu" "create layer" "load" #("will" 0 4 (fontified t face font-lock-comment-face)) "fly" "cu" "counsel-set-var" "l" "loa" "load file" "counsel " "For" "customize var" "cus" "emacs version" "youdao" "youdao-" "youdao" "you" "buffer" "load " "eshell" "power" "lo" "load" "shell" "which" "which key" "describe-fun" "eshell" "lo" "e" "loa" "evil mode" "e-lis" "e lisp" "revi" "flyche" "eva" #("s1" 0 2 (fontified t font-lock-face font-lock-variable-name-face)) "Function" "cust" "check ver" "flycheck de" "flycheck-lis" #("var" 0 3 (fontified t font-lock-face font-lock-keyword-face)) "flycheck-bu" "fl" "load" #("var" 0 3 (fontified t font-lock-face font-lock-keyword-face)) "flyche" "e" "term" "elpy " "load" "e" "helm do ag " "load" "eval" "sql set " "sql set p" "sql mode" "elpy" "eval buffer" "eshell" "e" "elpy-con" "describe mode" "term-mode" "term" "dired" "eshell" "shell" "eshell" "ev" "eval b" "which key " "which key" "load " "report emacs " "report emacs bug" "shell" "init " #("**" 0 1 (keymap (keymap (mouse-2 . org-bullets-set-point-and-cycle) (mouse-1 . org-cycle)) face (:foreground "#272822") fontified t) 1 2 (face org-level-2 keymap (keymap (mouse-2 . org-bullets-set-point-and-cycle) (mouse-1 . org-cycle)) composition (0 1 [9675]) fontified t)) "eval bu" #("init-packages" 0 13 (face font-lock-constant-face fontified t)) "helm do ag pro" "helm do ag " " helm ag pro" "helm " "helm ag pro" "helm ag" "package-" "load file" "evau" "tur" "eval bu" "turtl" "org pomo" "org-pomo" "cust" #("工作安排" 0 3 (fontified t face org-level-2) 3 4 (rear-nonsticky t fontified t face org-level-2)) "set inpu" "ca" "org ca" "eval bu" #("hello" 0 5 (fontified t)) "customize" "iedit-mode" "counsel-imenu" "imenu" "oc" "occur edit" "cu" "ibu" "customize-group" "ibuffer" #("processes" 0 9 (ibuffer-summary t)) "ib" "counsel git grep" "counsel git" "ibuffer" "lisp" "rev" "eval buff" "eval buf" "indent-re" "byte compile " "by" "byte compile  file" "elisp-mode" "prog" "counselgit" "load" "lo" "loa" "eval buf" #("global-hungry-delete-mode" 0 25 (fontified t)) "node" "load" "eval bu" "nodejs-repl-send" "nodejs" "eval bu" "eval buff" "eval buf" "eval buffer" "eval bu" #("set" 0 3 (fontified t)) "eval buffer" #("comp" 0 4 (fontified t)) "company-mod"))
(setq evil-jumps-history '((350 "/Users/wangqun/.spacemacs.d/init.el") (17689 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.spacemacs.d/init.el") (17175 "/Users/wangqun/.spacemacs.d/init.el") (3080 "/Users/wangqun/.spacemacs.d/init.el") (520 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.spacemacs.d/init.el") (520 "/Users/wangqun/.spacemacs.d/init.el") (747 "/Users/wangqun/.spacemacs.d/layers/turtletaro/config.el") (4032 "/Users/wangqun/.spacemacs.d/init.el") (747 "/Users/wangqun/.spacemacs.d/layers/turtletaro/config.el") (4032 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.spacemacs.d/layers/turtletaro/config.el") (520 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.spacemacs.d/init.el") (520 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.spacemacs.d/init.el") (1328 "/Users/wangqun/.emacs.d/lisp/init-packages.el") (1 "/Users/wangqun/.emacs.d/lisp/init-packages.el") (1 "/Users/wangqun/.spacemacs.d/layers/turtletaro/packages.el") (1 "/Users/wangqun/.spacemacs.d/layers/turtletaro/config.el") (1725 "/Users/wangqun/.spacemacs.d/init.el") (1664 "/Users/wangqun/.spacemacs.d/init.el") (1653 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.spacemacs.d/init.el") (1044 "/Users/wangqun/.spacemacs.d/layers/turtletaro/packages.el") (904 "/Users/wangqun/.spacemacs.d/layers/turtletaro/packages.el") (1 "/Users/wangqun/.spacemacs.d/layers/turtletaro/packages.el") (911 "/Users/wangqun/.spacemacs.d/layers/turtletaro/packages.el") (1168 "/Users/wangqun/.spacemacs.d/layers/turtletaro/packages.el") (1 "/Users/wangqun/.spacemacs.d/layers/turtletaro/packages.el") (2461 "/Users/wangqun/.spacemacs.d/init.el") (2461 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.spacemacs.d/init.el") (2461 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.spacemacs.d/init.el") (1328 "/Users/wangqun/.emacs.d/lisp/init-packages.el") (1328 "/Users/wangqun/.emacs.d/lisp/init-packages.el") (3385 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.emacs.d/lisp/init-packages.el") (1 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.spacemacs.d/init.el") (1757 "/Users/wangqun/.spacemacs.d/init.el") (375 "/Users/wangqun/dev/hiemacs/testjs.js") (1765 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/dev/hiemacs/testjs.js") (1765 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.spacemacs.d/init.el") (1730 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.spacemacs.d/init.el") (1730 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.spacemacs.d/init.el") (1704 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.spacemacs.d/init.el") (1 "/Users/wangqun/.spacemacs.d/init.el")))
(setq mark-ring 'nil)
(setq search-ring '("theme" "themes" "theme" "dev" ".." "dev" "lin" "hungry"))
(setq regexp-search-ring '("ivy" "\\(user\\).*?\\(config\\)" "\\(user\\).*?\\(init\\)" "pack" "configuration" "\\(user\\).*?\\(init\\)" "\\(default\\).*?\\(font\\)" "banner" "\\(line\\).*?\\(number\\)" "theme" "PATH" "\\(powerline\\).*?\\(arrow\\)" "key" "user" "user-config" "user-"))
(setq extended-command-history '(#("package-list-packages" 0 21 (match-part "package-list-packages")) "customize-group" "eval-buffer" "configuration-layer/create-layer" "load-file" "flycheck-mode" "customize-variable" "counsel-set-variable" "counsel-find-file" "emacs-version" "eshell" "powerline-reset" "powerline-vim-theme" "shell" "which-key-show-keymap" "which-key-show-major-mode" "evil-mode" "emacs-lisp-mode" "lisp-mode" "reveal-in-osx-finder" "term" "elpy-config" "helm-do-ag-project-root" "sql-mode" "describe-mode" "dired" "which-key-mode" "open-init-file" "turtletaro/retrieve-chrome-current-tab-url" "org-capture" "set-input-method" "iedit-mode" "imenu" "occur-edit-mode" "ibuffer" "indent-region" "byte-recompile-directory" "byte-compile-file" "prog-mode" "counsel-git" "nodejs-repl" "cd" "nodejs-repl-send-buffer" "company-mode"))
