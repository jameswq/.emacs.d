;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(input-method-history imenu--history-list regexp-history ido-buffer-history ivy-history org-read-date-history ido-file-history counsel-describe-symbol-history counsel-M-x-history file-name-history swiper-history extended-command-history minibuffer-history helm-M-x-input-history))
(setq imenu--history-list '("indent-region-or-buffer"))
(setq regexp-history '("hello" nil "interactively" "hello" "mode" "buffer"))
(setq ivy-history '("obj: func1" "lisp/init-keybindings.el" "lisp/init-packages.el"))
(setq org-read-date-history '("22:00    " "18:00    " "21:00            " "16:00    " "21:00            " "9:00    " "21:00    " "18:00    " "8:00    " "   "))
(setq ido-file-history '("."))
(setq counsel-describe-symbol-history '(#("^" 0 1 (ivy-index 5308)) #("^eval buff" 0 10 (ivy-index 0)) #("^org-mode" 0 9 (ivy-index 1))))
(setq counsel-M-x-history '(#("^eva bu" 0 7 (ivy-index 0)) #("^find va" 0 8 (ivy-index 1)) #("^find fun" 0 9 (ivy-index 0)) #("^nodejs repl send buffer" 0 24 (ivy-index 0)) #("^nodejs repl" 0 12 (ivy-index 6)) #("^load file" 0 10 (ivy-index 0)) #("^eval buffer" 0 12 (ivy-index 0)) #("^nodejs." 0 8 (ivy-index 0)) #("^eval buf" 0 9 (ivy-index 0)) #("^customize gr" 0 13 (ivy-index 0))))
(setq file-name-history '("~/.emacs.d/lisp/init-keybindings.el" "~/.emacs.d/lisp/init-better-defaults.el" "~/.emacs.d/turtletaro.org" "~/.emacs.d/lisp/init-packages.el" "~/.emacs.d/init.el" "~/.emacs.d/lisp/init-org.el" "~/org/first.org" "~/.emacs.d/lisp/init-better-defaults.elc" "~/.emacs.d/lisp/init-ui.el" "~/.spacemacs" "~/.emacs.d/lisp/custom.el" "~/dev/hiemacs/testjs.js" "~/.emacs.d.bak/.emacs.d.20180401/init.el" "~/.emacs.d/init-packages.el" #("/Users/wangqun/dev/hiemacs/" 0 27 (ivy-index 0)) #("/Users/wangqun/.emacs.d/init.el" 0 31 (ivy-index 0)) "~/.emacs.d/CHANGELOG.org" "~/org/sec.org"))
(setq swiper-history '(#("leng" 0 4 (ivy-index 2)) #("long break fre" 0 14 (ivy-index 0)) "occur-dwim" #("theme" 0 5 (ivy-index 4)) #("save" 0 4 (ivy-index 0)) #("backup" 0 6 (ivy-index 0)) #("hun" 0 3 (ivy-index 1)) #("hung" 0 4 (ivy-index 0)) "org" #("idle delay" 0 10 (ivy-index 0)) #("sme" 0 3 (ivy-index 0)) #("coun" 0 4 (ivy-index 3)) "recent"))
(setq extended-command-history '("reveal-in-osx-finder" "eval-buffer" "turtletaro/retrieve-chrome-current-tab-url" "customize-group" "org-capture" "set-input-method" "iedit-mode" "imenu" "occur-edit-mode" "ibuffer" "emacs-lisp-mode" "lisp-mode" "indent-region" "byte-recompile-directory" "byte-compile-file" "prog-mode" "counsel-git" "load-file" "nodejs-repl" "cd" "nodejs-repl-send-buffer" "company-mode"))
(setq minibuffer-history '("/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d/lisp/de" "/Users/wangqun/.emacs.d/tu" "/Users/wangqun/.emacs.d/lisp/pack" "/Users/wangqun/.emacs.d/lisp/p" "/Users/wangqun/.emacs.d/ini" "/Users/wangqun/.emacs.d/lisp/de" "/Users/wangqun/.emacs.d/lisp/org" "/Users/wangqun/.emacs.d/lisp/de" "org-pomo" "/Users/wangqun/.emacs.d/lisp/pa" #("setq" 0 4 (fontified t face font-lock-keyword-face)) "/Users/wangqun/.emacs.d/lisp/org" "/Users/wangqun/.emacs.d/lisp/de" "/Users/wangqun/.emacs.d/lisp/p" "org ca" #("Debugging" 0 9 (fontified t)) "grep" "/Users/wangqun/.emacs.d/lisp/or" "/Users/wangqun/org/" "iedit" "m" #("var" 0 3 (font-lock-face font-lock-keyword-face fontified t)) "iedit" "/Users/wangqun/.emacs.d/lisp/" "me" "/Users/wangqun/.emacs.d/lisp/pak" "/Users/wangqun/.emacs.d/lisp/defa" "tes" "/Users/wangqun/.emacs.d/lisp/" "popin" "/Users/wangqun/.emacs.d/lisp/pack" "/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d/ini" "var1" "concarString" "add" "web mode" "major" "/Users/wangqun/dev/hihtml/tst.html" "/Users/wangqun/.emacs.d/lisp/de" #("monokai" 0 7 (fontified t)) "/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d/tur" "/Users/wangqun/.emacs.d/turtletaro.org" "/Users/wangqun/.sp" "/Users/wangqun/.emacs.d/lisp/c" "/Users/wangqun/.sp" "/Users/wangqun/.emacs.d/lisp/aa.py" "/Users/wangqun/.emacs.d/init-ui.el" "with-eval-after-load" "/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d/testAA" "/Users/wangqun/.emacs.d/test/x.txt" "/Users/wangqun/.emacs.d/test/f.txt" "/Users/wangqun/.emacs.d/test/b.txt" "/Users/wangqun/.emacs.d/test/c.txt" "/Users/wangqun/.emacs.d/test/b.txt" "/Users/wangqun/.emacs.d/test/a.txt" "/Users/wangqun/.emacs.d/test" "try-expand-all-abbrevs" "" "hippie-expand" "/Users/wangqun/.emacs.d/lisp/key" "/Users/wangqun/.emacs.d/lisp/better" "/Users/wangqun/dev/hiemacs/testjs.js" "/Users/wangqun/dev/hieam" "in" "update-dir" "update-directory-autoloads" "update-dir" "update" "/Users/wangqun/.emacs.d/lisp" "mess" "/Users/wangqun/.emacs.d/lisp" "/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d/lisp" "in" "/Users/wangqun/.emacs.d/lisp/" #("python" 0 6 (fontified t)) "/Users/wangqun/.emacs.d/lisp/key" "/Users/wangqun/.emacs.d/lisp/init pa" "mes" "/Users/wangqun/.emacs.d/lisp/key" "init" "/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d/lisp/key" "/Users/wangqun/.sp" "/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d.bak/.emacs.d.20180401/ini" "/Users/wangqun/.emacs.d/ini" "/Users/wangqun/.emacs.d/init" "/Users/wangqun/.emacs.d/in" "/Users/wangqun/.emacs.d/ini" "/Users/wangqun/.emacs.d/init" "/Users/wangqun/.emacs.d/ini" "/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d/lisp/init-keybindings.el" "/Users/wangqun/.emacs.d/lisp/init-org.el" "/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d/lisp/init-better-default.el" "/Users/wangqun/.emacs.d/lisp/ini" "/Users/wangqun/.emacs.d/lisp/" "/Users/wangqun/.emacs.d/lisp/init-ui.el" "buffer" #("spacemacs-emacs-min-version" 0 27 (fontified t face font-lock-variable-name-face)) "/Users/wangqun/.emacs.d/lisp/ini" #("t." 0 2 (fontified t face font-lock-comment-face)) "/Users/wangqun/.emacs.d/ini" "features" "global-company-mode" #("> > " 0 2 (fontified t front-sticky (field inhibit-line-move-field-capture) rear-nonsticky t field output inhibit-line-move-field-capture t font-lock-face (comint-highlight-prompt)) 2 4 (fontified t front-sticky (field inhibit-line-move-field-capture) rear-nonsticky t field output inhibit-line-move-field-capture t font-lock-face (comint-highlight-prompt))) "popwin-mode" "" "auto-save-default" "in" "auto-save-default" "ini" "/Users/wangqun/org/fi" "company prefix" "company prefi" "company prefix" "company-prefix len" "find-fun" "/Users/wangqun/.emacs.d/init.el" "init" "ini" "mes" #("packages" 0 8 (face font-lock-comment-face fontified t)) #("GPLv3" 0 5 (face font-lock-comment-face fontified t)) "Delay" "company" "/Users/wangqun/.emacs.d/init" "Cancel" #("*" 0 1 (fontified t composition (0 1 [9673]) keymap (keymap (mouse-2 . org-bullets-set-point-and-cycle) (mouse-1 . org-cycle)) face org-level-1 line-prefix "" wrap-prefix #("* " 0 2 (face org-indent)))) #("setq-default" 0 12 (fontified t face font-lock-comment-face)) "/Users/wangqun/org/sec.org" "/Users/wangqun/dev/hiemacs/" "/Users/wangqun/.sp" "/Users/wangqun/.emacs.d/in" "/Users/wangqun/.emacs.d/ini"))
(setq helm-M-x-input-history '("evau" "tur" "eval bu" "turtl" "org pomo" "org-pomo" "cust" #("工作安排" 0 3 (face org-level-2 fontified t) 3 4 (face org-level-2 fontified t rear-nonsticky t)) "set inpu" "ca" "org ca" "eval bu" #("hello" 0 5 (fontified t)) "customize" "iedit-mode" "counsel-imenu" "imenu" "oc" "occur edit" "cu" "ibu" "customize-group" "ibuffer" #("processes" 0 9 (ibuffer-summary t)) "ib" "counsel git grep" "counsel git" "ibuffer" "lisp" "rev" "eval buff" "eval buf" "indent-re" "byte compile " "by" "byte compile  file" "elisp-mode" "prog" "counselgit" "load" "lo" "loa" "eval buf" #("global-hungry-delete-mode" 0 25 (fontified t)) "node" "load" "eval bu" "nodejs-repl-send" "nodejs" "eval bu" "eval buff" "eval buf" "eval buffer" "eval bu" #("set" 0 3 (fontified t)) "eval buffer" #("comp" 0 4 (fontified t)) "company-mod"))
(setq evil-jumps-history '((1392 "/Users/wangqun/.emacs.d/lisp/init-keybindings.el") (1724 "/Users/wangqun/.emacs.d/lisp/init-better-defaults.el") (93 "/Users/wangqun/.emacs.d/turtletaro.org") (1 "/Users/wangqun/.emacs.d/lisp/init-better-defaults.el") (93 "/Users/wangqun/.emacs.d/turtletaro.org") (369 "/Users/wangqun/.emacs.d/turtletaro.org") (1083 "/Users/wangqun/.emacs.d/lisp/init-packages.el") (1 "/Users/wangqun/.emacs.d/lisp/init-packages.el") (1 "/Users/wangqun/.emacs.d/init.el") (215 "/Users/wangqun/.emacs.d/gtd.org") (157 "/Users/wangqun/.emacs.d/gtd.org") (1 "/Users/wangqun/.emacs.d/lisp/init-org.el") (14 "/Users/wangqun/.emacs.d/gtd.org") (1 "/Users/wangqun/.emacs.d/gtd.org") (501 "/Users/wangqun/.emacs.d/lisp/init-org.el") (502 "/Users/wangqun/.emacs.d/lisp/init-org.el") (4459 "/Users/wangqun/.emacs.d/lisp/init-better-defaults.el") (4457 "/Users/wangqun/.emacs.d/lisp/init-better-defaults.el") (502 "/Users/wangqun/.emacs.d/lisp/init-org.el") (502 "/Users/wangqun/.emacs.d/lisp/init-org.el") (547 "/Users/wangqun/.emacs.d/lisp/init-org.el") (502 "/Users/wangqun/.emacs.d/lisp/init-org.el") (3692 "/Users/wangqun/.emacs.d/lisp/init-better-defaults.el") (1 "/Users/wangqun/.emacs.d/lisp/init-better-defaults.el") (1083 "/Users/wangqun/.emacs.d/lisp/init-packages.el") (1 "/Users/wangqun/.emacs.d/lisp/init-packages.el") (129 "/Users/wangqun/.emacs.d/lisp/init-org.el") (1 "/Users/wangqun/.emacs.d/lisp/init-org.el") (296 "/Users/wangqun/.emacs.d/lisp/init-org.el") (124 "/Users/wangqun/.emacs.d/gtd.org") (1 "/Users/wangqun/.emacs.d/lisp/init-org.el") (124 "/Users/wangqun/.emacs.d/gtd.org") (1 "/Users/wangqun/.emacs.d/gtd.org") (3692 "/Users/wangqun/.emacs.d/lisp/init-better-defaults.el") (1 "/Users/wangqun/.emacs.d/lisp/init-better-defaults.el") (1 "/Users/wangqun/.emacs.d/lisp/init-packages.el") (9 "/Users/wangqun/.emacs.d/gtd.org") (296 "/Users/wangqun/.emacs.d/lisp/init-org.el") (88 "/Users/wangqun/.emacs.d/lisp/init-org.el") (296 "/Users/wangqun/.emacs.d/lisp/init-org.el") (184 "/Users/wangqun/.emacs.d/lisp/init-org.el") (1 "/Users/wangqun/.emacs.d/lisp/init-org.el") (246 "/Users/wangqun/.emacs.d/lisp/init-org.el") (24953 "/Users/wangqun/.emacs.d/elpa/org-plus-contrib-20180129/org-capture.el") (246 "/Users/wangqun/.emacs.d/lisp/init-org.el") (1 "/usr/local/Cellar/emacs-plus/25.3/share/emacs/25.3/etc/DEBUG") (246 "/Users/wangqun/.emacs.d/lisp/init-org.el") (1 "/Users/wangqun/.emacs.d/gtd.org") (1 "/Users/wangqun/.emacs.d/lisp/init-org.el") (15883 "/Users/wangqun/.spacemacs") (1 "/Users/wangqun/.emacs.d/gtd.org") (15883 "/Users/wangqun/.spacemacs") (764 "/Users/wangqun/.emacs.d/init.el") (1 "/Users/wangqun/.spacemacs") (764 "/Users/wangqun/.emacs.d/init.el") (1 "/Users/wangqun/.emacs.d/init.el") (269 "/Users/wangqun/.emacs.d/lisp/init-org.el") (209 "/Users/wangqun/org/first.org") (1 "/Users/wangqun/.emacs.d/lisp/init-org.el") (209 "/Users/wangqun/org/first.org") (1 "/Users/wangqun/org/first.org") (151 "/Users/wangqun/dev/hiemacs/testjs.js") (1 "/Users/wangqun/org/first.org") (151 "/Users/wangqun/dev/hiemacs/testjs.js") (151 "/Users/wangqun/dev/hiemacs/testjs.js") (764 "/Users/wangqun/.emacs.d/init.el") (1 "/Users/wangqun/dev/hiemacs/testjs.js") (1 "/Users/wangqun/.emacs.d/init.el") (1150 "/Users/wangqun/.emacs.d/lisp/init-keybindings.el") (848 "/Users/wangqun/.emacs.d/lisp/init-packages.el") (903 "/Users/wangqun/.emacs.d/lisp/init-packages.el") (1024 "/Users/wangqun/.emacs.d/lisp/init-packages.el") (1061 "/Users/wangqun/.emacs.d/lisp/init-packages.el") (1 "/Users/wangqun/.emacs.d/lisp/init-packages.el") (3349 "/Users/wangqun/.spacemacs") (1229 "/Users/wangqun/.emacs.d/lisp/init-packages.el") (1 "/Users/wangqun/.spacemacs") (3656 "/Users/wangqun/.emacs.d/lisp/init-better-defaults.el") (248 "/Users/wangqun/dev/hiemacs/testjs.js") (356 "/Users/wangqun/dev/hiemacs/testjs.js") (1026 "/Users/wangqun/.emacs.d/lisp/init-keybindings.el") (1025 "/Users/wangqun/.emacs.d/lisp/init-keybindings.el") (356 "/Users/wangqun/dev/hiemacs/testjs.js") (623 "/Users/wangqun/.emacs.d/lisp/init-better-defaults.el") (2258 "/Users/wangqun/.emacs.d/lisp/init-better-defaults.el") (356 "/Users/wangqun/dev/hiemacs/testjs.js") (57 "/Users/wangqun/dev/hiemacs/testjs.js") (1229 "/Users/wangqun/.emacs.d/lisp/init-packages.el") (1321 "/Users/wangqun/.emacs.d/lisp/init-packages.el") (968 "/Users/wangqun/.emacs.d/lisp/init-packages.el") (1 "/Users/wangqun/.emacs.d/lisp/init-better-defaults.elc") (1 "/Users/wangqun/.emacs.d/lisp/init-packages.el") (1 "/Users/wangqun/.emacs.d/lisp/init-better-defaults.elc") (1453 "/Users/wangqun/.emacs.d/init.el") (1 "/Users/wangqun/.emacs.d/init.el") (1 "/Users/wangqun/dev/hiemacs/testjs.js") (1 "/Users/wangqun/dev/hiemacs/testjs.js") (1 "/Users/wangqun/dev/hiemacs/testjs.js")))
(setq mark-ring 'nil)
(setq search-ring '("theme" "themes" "theme" "dev" ".." "dev" "lin" "hungry"))
(setq regexp-search-ring '("leng" "\\(long\\).*?\\(break\\).*?\\(fre\\)" "theme" "save" "backup" "hun" "hung" "\\(idle\\).*?\\(delay\\)" "sme" "coun"))
(setq extended-command-history '("reveal-in-osx-finder" "eval-buffer" "turtletaro/retrieve-chrome-current-tab-url" "customize-group" "org-capture" "set-input-method" "iedit-mode" "imenu" "occur-edit-mode" "ibuffer" "emacs-lisp-mode" "lisp-mode" "indent-region" "byte-recompile-directory" "byte-compile-file" "prog-mode" "counsel-git" "load-file" "nodejs-repl" "cd" "nodejs-repl-send-buffer" "company-mode"))
